name: Integrate

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_VERSION: 2022.3.13f1
  PROJECT_PATH: Test
  PROJECT_NAME: Test

jobs:  
  check-license:
    name: Check for Unity License
    runs-on: ubuntu-latest
    steps:
      - name: Fail build if no unity license set
        if: ${{ env.UNITY_LICENSE == '' }}
        uses: actions/github-script@v7
        with:
          script: |
              core.setFailed('No unity license secret set')

  test:
    name: Run EditMode and PlayMode Tests
    runs-on: ubuntu-latest
    needs: [check-license]
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache
        uses: actions/cache@v4.0.2
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ env.PROJECT_PATH }}
          restore-keys: |
            Library-${{ env.PROJECT_PATH }}
            Library-

      - name: Run Tests
        uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          projectPath: ${{ env.PROJECT_PATH }}
          testMode: all
          artifactsPath: artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: Test Results (All)
          customParameters: -debugCodeOptimization
          coverageOptions: 'generateAdditionalMetrics'

      - name: Publish Test Results
        uses: actions/upload-artifact@v4.3.1
        if: always()
        with:
         name: Test Results (All)
         path: ${{ steps.tests.outputs.artifactsPath }}

#      - name: Publish Code Coverage
#        uses: codecov/codecov-action@v3
#        with:
#          name: Code Coverage Results (All)
#          flags: automated
#          token: ${{ secrets.CODECOV_TOKEN }}
#          files: CodeCoverage/**/*.xml
#          fail_ci_if_error: true
#          verbose: true

  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: [check-license]
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneLinux64
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache files
        uses: actions/cache@v4.0.2
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ env.PROJECT_PATH }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ env.PROJECT_PATH }}-
            Library-

      # - name: Build
      #   uses: game-ci/unity-builder@v4.0.1
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #     UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      #     UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      #   with:
      #     buildName: ${{ env.PROJECT_NAME }}
      #     projectPath: ${{ env.PROJECT_PATH }}
      #     unityVersion: ${{ env.UNITY_VERSION }}
      #     targetPlatform: ${{ matrix.targetPlatform }}

      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v4.3.1
      #   with:
      #     name: Build-${{ matrix.targetPlatform }}
      #     path: build/${{ matrix.targetPlatform }}

  lint:
    name: Lints code base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v7
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_CSHARP: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
